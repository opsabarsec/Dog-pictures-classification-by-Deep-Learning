# -*- coding: utf-8 -*-
"""Stanford_dogs_loaded_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcAFOSreOd_68WF5gdvoQOceld7cAwrX

### Xception pretrained - Stanford Dogs dataset classification

If you like this script, consider adopting a dog, and never abandon yours

![Never abandon a dog](http://www.the-teen-spirit.dk/films/vanwilder/image.jpg)
"""

from google.colab import drive
drive.mount('/content/drive')

"""I will be performing following steps :
1. Importing the libraries and the labels
2. Load the trained Xception model 
3. Predict the dog breed from a picture

# **ABOUT THE DATASET **

The Stanford Dogs dataset contains images of 120 breeds of dogs from around the world. This dataset has been built using images and annotation from ImageNet for the task of fine-grained image categorization. It was originally collected for fine-grain image categorization, a challenging problem as certain dog breeds have near identical features or differ in colour and age.

## 1. Import the libraries and the label
"""

!pip install tf_explain
#!pip install split-folders
#!conda install -y gdown

"""### 1.1 Libraries and data"""

import os
import pandas as pd


import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as image
import matplotlib.image as mpimg


import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import h5py
import pickle
from keras.applications.xception import Xception, preprocess_input




print("Loaded all libraries")

!gdown --id 1oyNYRZkf6uyeiEzW69XLo1edJjrdHwPE
!gdown --id 1u26yF26AKWhw_QZCNFXDEuB9JCM2ePZX


print("Loaded all model files")

pickle_in = open("/content/labels_sorted_dict.pickle","rb")
label_maps_rev = pickle.load(pickle_in)
#label_maps_rev

"""## 2. MODEL LOAD

### 2.1 Importing the Xception CNN
"""

model1 = tf.keras.models.load_model("/content/my_model.h5")
#model1 = tf.keras.models.load_model("/media/marco/DATA/OC_Machine_learning/section_6/DATA/model_89/dog_breed_CNN.h5")
model1.summary()

"""## 3. PREDICTIONS"""

def file_predict(filename):
    # download and save
    
    img = Image.open(filename)
    img = img.convert('RGB')
    img = img.resize((299, 299))
    img.save(filename)
    # show image
    plt.figure(figsize=(4, 4))
    plt.imshow(img)
    plt.axis('off')
    # predict
    img = image.imread(filename)
    img = preprocess_input(img)
    probs = model1.predict(np.expand_dims(img, axis=0))
    for idx in probs.argsort()[0][::-1][:5]:
        print("{:.2f}%".format(probs[0][idx]*100), "\t", label_maps_rev[idx].split("-")[-1])

file_predict('/content/canino.jpg')

"""### 3.1 predict directly from download address"""

def download_and_predict(url, filename):
    # download and save
    os.system("curl -s {} -o {}".format(url, filename))
    img = Image.open(filename)
    img = img.convert('RGB')
    img = img.resize((299, 299))
    img.save(filename)
    # show image
    plt.figure(figsize=(4, 4))
    plt.imshow(img)
    plt.axis('off')
    # predict
    img = image.imread(filename)
    img = preprocess_input(img)
    probs = model1.predict(np.expand_dims(img, axis=0))
    for idx in probs.argsort()[0][::-1][:5]:
        print("{:.2f}%".format(probs[0][idx]*100), "\t", label_maps_rev[idx].split("-")[-1])

download_and_predict("https://cdn.pixabay.com/photo/2018/08/12/02/52/belgian-mallinois-3599991_1280.jpg",
                     "test_1.jpg")



